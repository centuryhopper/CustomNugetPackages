@using Microsoft.AspNetCore.Components.Routing
@inject NavigationManager NavigationManager
 
@* ConfirmExternalNavigation="IsPageDirty" must set like this so that reloading page doesn't show navigation popup unless page is dirty *@
<NavigationLock ConfirmExternalNavigation="IsPageDirty" 
OnBeforeInternalNavigation="@(async (LocationChangingContext context) => {
 
    // Console.WriteLine("IsNavigationIntercepted: " + context.IsNavigationIntercepted);
 
    // If navigation is triggered due to idle timeout, allow it
    if (IsIdleRedirect)
    {
        return; // Allow navigation
    }
 
    if (IsPageDirty)
    {
        var isConfirmed = await jsRuntime.InvokeAsync<bool>("confirm", 
            "Are you sure you want to leave? You have made changes to this page that are not saved");
 
        if (!isConfirmed)
        {
            context.PreventNavigation();
        }
    }
})" />
 
 
@code {
    private bool IsIdleRedirect = false;
    [Parameter] public bool IsPageDirty {get;set;} = false;
    [Parameter] public int Seconds { get;set; } = 30 * 60;
 
    [JSInvokable]
    public async void RedirectUser()
    {
        IsIdleRedirect = true; // Set flag to bypass NavigationLock
        // small delay before navigating so that IsIdleRedirect is true when OnBeforeInternalNavigation is called
        await Task.Delay(1);
        NavigationManager.NavigateTo("session-expired");
    }
 
    [JSInvokable]
    public async Task StayLoggedIn()
    {
        await jsRuntime.InvokeVoidAsync("SESSION_FUNCTIONS.startIdleTimer", DotNetObjectReference.Create(this), Seconds * 1000);
    }
 
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeVoidAsync("SESSION_FUNCTIONS.checkExpiry", NavigationManager.BaseUri + "session-expired");
 
            // 30 minutes to milliseconds
            await jsRuntime.InvokeVoidAsync("SESSION_FUNCTIONS.startIdleTimer", DotNetObjectReference.Create(this), Seconds * 1000);
        }
    }
}
 
 
 
 
