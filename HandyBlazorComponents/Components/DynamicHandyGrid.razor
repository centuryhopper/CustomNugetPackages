@typeparam TItem where TItem : class, new()
@typeparam HandyGridEntity where HandyGridEntity : HandyGridEntityAbstract<TItem>, new()
@typeparam TMapper where TMapper : ClassMap
@using System.Linq.Expressions


@* This grid has pagination and filtering and sorting along with all CRUD operations *@
@* It is recommended to use only primitive types and certain reference types for the columns
    Usable reference types include only strings and ienumerables of either a string or primitive type
    Other reference types have not been tested and it is recommended to convert them into strings when used
 *@

<div class="text-center overflow-auto m-3">
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>
                    Row #
                </th>
                <th>
                    Actions
                </th>
                @foreach (var column in HandyGridState.Columns)
                {
                    <th>
                        <button @onclick="@(() => SortData(column))" class="btn btn-primary">
                            @column @GetSortIcon(column)
                        </button>
                        <TextInputFilter Value="@GetFilterValue(column)"
                            ValueChanged="@(value => SetFilterValue(column, value))" PlaceHolder=@($"Filter by {column}") />
                    </th>
                }
                <th>UPDATE</th>
                <th>DELETE</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < pagedItemsHelper.Count; i++)
            {
                int rowIdx = i;
                <tr>
                    <td>
                        <div style="width: 2.5rem;">
                            @rowIdx
                        </div>
                    </td>
                    <td>
                        @if (AllowEdits[rowIdx])
                        {
                            <button @onclick="@(() => CancelEdit(rowIdx, pagedItemsHelper[rowIdx]))"
                                class="btn btn-primary">Cancel</button>
                        }
                        else
                        {
                            <button @onclick="@(() => BeginEdit(rowIdx))" class="btn btn-primary">Edit</button>
                        }
                    </td>
                    @foreach (var (columnIdx, columnName) in HandyGridState.Columns.Select((columnName, columnIdx) => (columnIdx,
                   columnName)))
                    {
                        <td>
                            @* edit mode cases *@
                            @if (!HandyGridState.ReadonlyColumns.Contains(columnName) && AllowEdits[rowIdx])
                            {
                                @if (HandyGridState.EditModeFragments != null &&
                               HandyGridState.EditModeFragments.TryGetValue(columnName, out var template))
                                {
                                    <div class="d-flex align-items-center p-3">
                                        @template(pagedItemsHelper[rowIdx])
                                    </div>
                                }
                                else
                                {
                                    <div class="d-flex align-items-center p-3">
                                        <input value="@(pagedItemsHelper[rowIdx].DisplayPropertyInGrid(columnName))"
                                            @oninput="(e) => pagedItemsHelper[rowIdx].SetPropertyValue(columnName, e.Value)"
                                            class="form-control" style="width: 10rem" />
                                    </div>
                                }
                            }
                            @* view mode cases *@
                            else
                            {
                                @if (HandyGridState.ViewModeFragments != null &&
                               HandyGridState.ViewModeFragments.TryGetValue(columnName, out var template))
                                {
                                    @template(pagedItemsHelper[rowIdx])
                                }
                                else
                                {
                                    @* <span>@GetPropertyValue(pagedItemsHelper[rowIdx], columnName)</span> *@
                                    <span>@(pagedItemsHelper[rowIdx].DisplayPropertyInGrid(columnName))</span>
                                }
                            }

                            <span class="text-danger">@ErrorMessages[rowIdx, columnIdx]</span>
                        </td>
                    }
                    <td>
                        <button disabled="@(!AllowEdits[rowIdx])"
                            @onclick="@(() => UpdateRow(rowIdx, pagedItemsHelper[rowIdx]))"
                            class="btn btn-primary">Update</button>
                    </td>
                    <td>
                        <button @onclick="@(() => DeleteRow(pagedItemsHelper[rowIdx]))"
                            class="btn btn-danger">DELETE</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<ConfirmModal @ref="confirmModal" Title="Warning"
    BodyText="Are you sure you want to delete this record? THIS ACTION IS IRREVERSIBLE!" />
<CustomPagination CurrentPage="CurrentPage" TotalPages="TotalPages" OnPageChanged="OnPageChanged" />

<AddDynamicItemsModal TItem="TItem" HandyGridEntity="HandyGridEntity" @ref="AddDynamicItemsModal" />

<button class="btn btn-primary" @onclick="AddNewItems">Add New Items</button>

<div class="m-3">
    <button class="btn btn-info" @onclick="ExportTableAsCsv">Export Table as CSV</button>
</div>

<NotificationModal @ref="notificationModal" />

<UploadComponent TItem="TItem" TMapper="TMapper" HandyGridEntity="HandyGridEntity" />

@code {
    private ConfirmModal confirmModal = default!;
    private NotificationModal notificationModal = default!;
    private AddDynamicItemsModal<TItem, HandyGridEntity> AddDynamicItemsModal = default!;

    [CascadingParameter(Name = nameof(HandyGridState))]
    public HandyGridStateAbstract<HandyGridEntity, TItem> HandyGridState { get; set; }

    [Parameter]
    public EventCallback<IEnumerable<HandyGridEntity>> OnCreate { get; set; }
    [Parameter]
    public EventCallback<HandyGridEntity> OnUpdate { get; set; }
    [Parameter]
    public EventCallback<HandyGridEntity> OnDelete { get; set; }



    [Parameter]
    public int CurrentPage { get; set; } = 1;

    private const int pageSize = 5; // Number of items per page
    private int TotalPages => (int)Math.Ceiling((double)filteredItems.Count() / pageSize);

    private List<bool> AllowEdits = new();
    private Dictionary<string, string> FilterValues { get; set; } = new();
    //private List<string>? Columns { get; set; }
    private IEnumerable<HandyGridEntity> filteredItems =>
    HandyGridState.Items.Where(item => FilterQuery(item));

    private List<HandyGridEntity> pagedItems = new();
    /// <summary>
    /// A temp list in the dynamic handy grid so that the cancel function can be used to revert back the old values in the
    /// original grid.
    /// Used in case we want to revert a change.
    /// </summary>
    /// <returns></returns>
    private List<HandyGridEntity> pagedItemsHelper = new();
    private string sortColumn;
    private bool sortAscending = true;
    private List<HandyGridEntity> ItemsToAdd = new();

    private string[,] _errorMessages;

    private string[,] ErrorMessages
    {
        get
        {
            if (_errorMessages == null || _errorMessages.GetLength(0) != pagedItemsHelper.Count || _errorMessages.GetLength(1) !=
            (HandyGridState.Columns?.Count ?? 0))
            {
                _errorMessages = new string[pagedItemsHelper.Count, HandyGridState.Columns?.Count ?? 0];
            }
            return _errorMessages;
        }
        set => _errorMessages = value;
    }

    private async Task AddNewItems()
    {
        ItemsToAdd = await AddDynamicItemsModal.ShowAsync();
        // ItemsToAdd.ForEach(item => Console.WriteLine(item));
        int maxId = HandyGridState.Items.Max(o => o.GetPrimaryKey());
        // Console.WriteLine("maxId: " + maxId);
        if (ItemsToAdd.Any())
        {
            for (int i = 0; i < ItemsToAdd.Count; i++)
            {
                ItemsToAdd[i].SetPrimaryKey(++maxId);
            }

            HandyGridState.Items.AddRange(ItemsToAdd);

            // server call
            await OnCreate.InvokeAsync(ItemsToAdd);
        }
    }

    // Handle page change event
    private void OnPageChanged(int newPage)
    {
        //Console.WriteLine("newPage: " + newPage);
        CurrentPage = newPage;
        UpdatePagedItems();
        //StateHasChanged();
    }

    private void SortData(string columnName)
    {
        if (sortColumn == columnName)
        {
            sortAscending = !sortAscending; // Toggle sort direction
        }
        else
        {
            sortColumn = columnName; // Set new column to sort
            sortAscending = true; // Default to ascending
        }

        UpdatePagedItems();
    }

    private void UpdatePagedItems()
    {
        var itemsQuery = filteredItems.AsQueryable();

        // Apply sorting using reflection
        if (!string.IsNullOrWhiteSpace(sortColumn))
        {
            var param = Expression.Parameter(typeof(HandyGridEntity), "entity");

            // Navigate to the TItem property of HandyGridEntity
            var tItemProperty = Expression.PropertyOrField(param, "obj"); // Replace 'TItem' with the actual property name of HandyGridEntity

            // Access the target property or field on TItem
            var property = Expression.PropertyOrField(tItemProperty, sortColumn);

            Expression sortExpression;

            // Check if the property is IEnumerable<string>
            if (typeof(IEnumerable<string>).IsAssignableFrom(property.Type) && property.Type != typeof(string))
            {
                // Create an expression to join the strings with ", " as a separator
                var joinMethod = typeof(string).GetMethod("Join", new[] { typeof(string), typeof(IEnumerable<string>) });
                sortExpression = Expression.Call(joinMethod, Expression.Constant(", "), property);
            }
            else
            {
                // Convert property to object for non-IEnumerable<string> types
                sortExpression = Expression.Convert(property, typeof(object));
            }

            // Create the lambda expression for sorting
            var lambda = Expression.Lambda<Func<HandyGridEntity, object>>(sortExpression, param);

            // Apply sorting
            itemsQuery = sortAscending ? itemsQuery.OrderBy(lambda) : itemsQuery.OrderByDescending(lambda);
        }

        pagedItems = itemsQuery.Skip((CurrentPage - 1) * pageSize).Take(pageSize).ToList();
        //pagedItemsHelper = DeepCopy(pagedItems);
        pagedItemsHelper = pagedItems.Select(item => {
            HandyGridEntity entity = new HandyGridEntity();
            entity.Object = item.DeepCopy();
            return entity;
        }).ToList();
        AllowEdits = Enumerable.Repeat(false, pagedItems.Count).ToList();
        // Console.WriteLine(AllowEdits.Count);

        StateHasChanged();
    }

    private bool FilterQuery(HandyGridEntity item)
    {
        bool nullOrWhiteSpaceCheck = FilterValues.Values.All(
        filter => string.IsNullOrWhiteSpace(filter)
        );

        bool containsCheck = HandyGridState.Columns
        .Any(columnName =>
        !string.IsNullOrWhiteSpace(FilterValues[columnName]) &&
        item.DisplayPropertyInGrid(columnName).ToString().Contains(FilterValues[columnName],
        StringComparison.OrdinalIgnoreCase));

        return nullOrWhiteSpaceCheck || containsCheck;
    }

    protected override void OnParametersSet()
    {
        UpdatePagedItems();
        // Console.WriteLine("parameters changed");
    }

    protected override void OnInitialized()
    {
        //Columns = typeof(TItem).GetProperties().Select(prop => prop.Name).ToList();
        foreach (var column in HandyGridState.Columns)
        {
            FilterValues.Add(column, string.Empty);
        }
        UpdatePagedItems();
        //Filters = Enumerable.Repeat(string.Empty, Columns.Count).ToList();
        // Columns.ForEach(c=>Console.WriteLine(c));
    }

    private async Task UpdateRow(int rowIdx, HandyGridEntity item)
    {
        // find out rows that have errors
        var validation = HandyGridState.ValidationChecks(item, HandyGridState.Columns);
        if (!validation.Flag)
        {
            // reset
            // getlength(1) returns number of columns
            // getlength(0) returns number of rows
            for (var columnIdx = 0; columnIdx < ErrorMessages.GetLength(1); columnIdx++)
            {
                ErrorMessages[rowIdx, columnIdx] = "";
            }

            // show errors
            foreach (var kvp in validation.ErrorMessagesDict)
            {
                //Console.WriteLine(kvp.Key);
                ErrorMessages[rowIdx, kvp.Key] = string.Join(",", kvp.Value);
            }
        }
        else
        {
            for (var columnIdx = 0; columnIdx < ErrorMessages.GetLength(1); columnIdx++)
            {
                ErrorMessages[rowIdx, columnIdx] = "";
            }
        }


        // checks if any of the cells still has errors
        if (ErrorMessages.Cast<string>().Any(errMsg => !string.IsNullOrWhiteSpace(errMsg)))
        {
            return;
        }

        for (int i = 0; i < HandyGridState.Items.Count; i++)
        {
            if (HandyGridState.Items[i].GetPrimaryKey() == item.GetPrimaryKey())
            {
                var props = new Dictionary<string, object>();

                foreach (var columnName in HandyGridState.Columns)
                {
                    // SetPropertyValue(Items[i], item, columnName);
                    props.Add(columnName, item.GetPropertyValue(columnName)!);
                }

                HandyGridState.Items[i].SetProperties(props);
            }
        }

        //UpdatePagedItems();

        await OnUpdate.InvokeAsync(item);
    }

    private async Task DeleteRow(HandyGridEntity entity)
    {
        //Console.WriteLine(item.GetPrimaryKey());
        var response = await confirmModal.ShowAsync();
        if (response)
        {
            var itemToRemove = HandyGridState.Items.FirstOrDefault(o => o.GetPrimaryKey() == entity.GetPrimaryKey());
            if (itemToRemove != null)
            {
                HandyGridState.Items.Remove(itemToRemove);
            }
            //Console.WriteLine(Items.Count);
            await OnDelete.InvokeAsync(entity);
        }
    }

    private async Task CancelEdit(int rowIdx, HandyGridEntity entity)
    {
        // clear error messages
        for (var columnIdx = 0; columnIdx < ErrorMessages.GetLength(1); columnIdx++)
        {
            ErrorMessages[rowIdx, columnIdx] = "";
        }

        foreach (var columnName in HandyGridState.Columns)
        {
            //SetPropertyValue(pagedItemsHelper[rowIdx], GetPropertyValue(pagedItems[rowIdx], columnName), columnName);
            pagedItemsHelper[rowIdx].SetPropertyValue(columnName, pagedItems[rowIdx].GetPropertyValue(columnName));
        }

        AllowEdits[rowIdx] = false;
    }

    private async Task BeginEdit(int rowIdx)
    {
        AllowEdits[rowIdx] = true;
    }

    private string GetFilterValue(string column)
    {
        //Console.WriteLine(column);
        //Console.WriteLine(FilterValues[column]);
        return FilterValues.ContainsKey(column) ? FilterValues[column] : "";
    }

    private void SetFilterValue(string column, string value)
    {
        //Console.WriteLine("setting: " + column + " to " + value);
        FilterValues[column] = value;
        FilterItems();
    }

    private void FilterItems()
    {
        // Filtering logic based on FilterValues
        CurrentPage = 1;
        UpdatePagedItems();
    }

    private string GetSortIcon(string columnName)
    {
        return sortColumn == columnName ? (sortAscending ? "↑" : "↓") : string.Empty; // Return an up or down arrow based on
    }

    private async Task ExportTableAsCsv()
    {
        var result = string.Join(",", HandyGridState.Columns);
        result += '\n';
        foreach (var acc in HandyGridState.Items)
        {
            var stringified = HandyGridState.Columns.Select(col => acc.DisplayPropertyInGrid(col).ToString()?.Replace(",", "+"));
            result += $"{string.Join(",", stringified)}\n";
        }
        await jsRuntime.InvokeVoidAsync("saveAsFile", "data.csv", result);
    }

}
