@typeparam TItem


<div class="dropdown">
    <button class="btn btn-secondary dropdown-toggle" type="button" @onclick="ToggleDropdown" @onkeydown="@((kba) => CloseDropdown(kba))">
        @Placeholder (@SelectedItems.Count())
    </button>
    @if (isDropdownOpen)
    {
        <div class="dropdown-menu show" style="max-height: 200px; overflow-y: auto;">
            @foreach (var item in Items)
            {
                <div class="dropdown-item d-flex align-items-center">
                    <input type="checkbox" class="form-check-input me-2"
                           @onchange="(e) => OnCheckboxChanged(e, item)"
                           checked="@SelectedItems.Contains(item)"
                           @onkeydown="@((kba) => CloseDropdown(kba))" />
                    <label class="form-check-label">@item</label>
                </div>
            }
        </div>
    }
</div>

@code {

    [Parameter]
    public List<string> Items { get; set; } = new();

    [Parameter]
    public List<string> SelectedItems { get; set; } = new();

    [Parameter]
    public EventCallback<(TItem, IEnumerable<string>)> SelectedItemsChanged { get; set; }

    [Parameter]
    public string Placeholder { get; set; } = "Select Items";

    private bool isDropdownOpen = false;

    public void CloseDropdown(KeyboardEventArgs keyboardEventArgs)
    {
        //Console.WriteLine(keyboardEventArgs.Key);
        if (keyboardEventArgs.Key == "Escape")
        {
            isDropdownOpen = false;
            StateHasChanged();
        }
    }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        await jsRuntime.InvokeVoidAsync("UI.registerEscapeKeyHandler", DotNetObjectReference.Create(this));
    //    }
    //}


    private async Task OnCheckboxChanged(ChangeEventArgs e, string item)
    {
        var selectedList = SelectedItems.ToList();

        // Toggle the selected item
        if ((bool)e.Value)
        {
            if (!selectedList.Contains(item))
                selectedList.Add(item);

            SelectedItems.Add(item);
        }
        else
        {
            selectedList.Remove(item);
            SelectedItems.Remove(item);
        }

        //foreach(var sel in SelectedItems)
        //{
        //    Console.WriteLine(sel);
        //}

        //Console.WriteLine(SelectedItems.Count);

        // Invoke the callback with the updated list
        //await SelectedItemsChanged.InvokeAsync((CurrentRef, SelectedItems));
    }

    private void ToggleDropdown()
    {
        isDropdownOpen = !isDropdownOpen;
    }
}
