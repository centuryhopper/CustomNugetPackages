@using Microsoft.AspNetCore.Components

<style>
    a {
        cursor: pointer;
    }
</style>
 
<div class="container">
    @if (TotalPages > 0)
    {
        <ul class="pagination justify-content-end">
            @* <div class="d-flex flex-row-reverse">
                <p>Page Number</p>
            </div> *@
            @{
                var firstPageDisabled = (CurrentPage > 1 ? "" : "disabled");
                var firstPageColored = (CurrentPage > 1 ? "color: blue;" : "");
            }
            <li class="@($"page-item {firstPageDisabled}")">
                <a class="page-link" @onclick="GoToFirstPage" disabled="@IsFirstPage">First</a>
            </li>
            <li class="@($"page-item {firstPageDisabled}")">
                <a class="page-link" @onclick="PrevPage" disabled="@IsFirstPage" style="@firstPageColored">Previous</a>
            </li>
            @for (int pge = StartPage; pge <= EndPage; pge++)
            {
                @* must use a temporary variable to make this work *@
                int cur = pge;
                <li class="page-item @(cur == CurrentPage ? "active" : "")">
                    <a class="page-link" @onclick="@(() => GoToPage(cur))">@pge</a>
                </li>
            }

            @{
                var lastPageDisabled = (CurrentPage < TotalPages ? "" : "disabled");
                var lastPageColored = (CurrentPage < TotalPages ? "color: blue;" : "");
            }
            <li class="@($"page-item {lastPageDisabled}")">
                <a class="page-link" @onclick="NextPage" disabled="@IsLastPage" style="@lastPageColored">Next</a>
            </li>
            <li class="@($"page-item {lastPageDisabled}")">
                <a class="page-link" @onclick="GoToLastPage" disabled="@IsLastPage" style="@lastPageColored">Last</a>
            </li>
        </ul>
    }
</div>








 
@code {
    [Parameter] public int CurrentPage { get; set; }
    [Parameter] public int TotalPages { get; set; }
    [Parameter] public EventCallback<int> OnPageChanged { get; set; }
 
    private bool IsFirstPage => CurrentPage == 1;
    private bool IsLastPage => CurrentPage == TotalPages;

    private int StartPage { get; set; }
    private int EndPage { get; set; }

    protected override void OnParametersSet()
    {
        // limit the range of pagination
        int startPage = CurrentPage - 5;
        int endPage = CurrentPage + 4;
        if (startPage <= 0)
        {
            startPage = 1;
            //endPage = endPage - (startPage - 1);
        }

        if (endPage > TotalPages)
        {
            endPage = TotalPages;
            if (endPage > 10)
            {
                startPage = endPage - 9;
            }
        }

        StartPage = startPage;
        EndPage = endPage;
        
    }
 
    private void GoToFirstPage()
    {
        CurrentPage = 1;
        OnPageChanged.InvokeAsync(CurrentPage);
    }
 
    private void GoToLastPage()
    {
        CurrentPage = TotalPages;
        OnPageChanged.InvokeAsync(CurrentPage);
    }

    private void GoToPage(int pageNumber)
    {
        CurrentPage = pageNumber;
        OnPageChanged.InvokeAsync(pageNumber);
        //Console.WriteLine(CurrentPage);
    }
 
    private void PrevPage()
    {
        // Console.WriteLine(CurrentPage);
        if (CurrentPage > 1)
        {
            OnPageChanged.InvokeAsync(CurrentPage - 1);
        }
    }
 
    private void NextPage()
    {
        //Console.WriteLine("CurrentPage: "+ CurrentPage);
        if (CurrentPage < TotalPages)
        {
            OnPageChanged.InvokeAsync(CurrentPage + 1);
        }
    }
}