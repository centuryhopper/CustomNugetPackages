@using Microsoft.AspNetCore.Components.Routing

<NavigationLock ConfirmExternalNavigation="false" OnBeforeInternalNavigation="@( async (ctx) => {
    if (IsPageDirty)
    {
        var isConfirmed = await jsRuntime.InvokeAsync<bool>("confirm", 
            "You have unsaved changes. Are you sure you want to leave? Double check your work!");
        if (!isConfirmed)
        {
            ctx.PreventNavigation();
        }
    }
})" />

@code {
    private bool IsPageDirty = false;
    [Parameter]
    public int Seconds { get;set; } = 30;
    [Parameter]
    public string JWT_TOKEN_NAME {get;set;} = "jwt";
    [Parameter]
    public string JWT_TOKEN_EXP_DATE_NAME {get;set;} = "expDate";
    [Parameter]
    public string ReturnUrl {get;set;} = string.Empty;

    public void SetPageDirtyValue(bool value)
    {
        IsPageDirty = value;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // test run of adding a dummy timestamp
            // await jsRuntime.InvokeVoidAsync("localStorage.setItem", JWT_TOKEN_EXP_DATE_NAME, new DateTimeOffset(DateTime.Now.AddSeconds(55)).ToUnixTimeMilliseconds());
            await jsRuntime.InvokeVoidAsync("SESSION_FUNCTIONS.run", string.IsNullOrWhiteSpace(ReturnUrl) ? NavigationManager.BaseUri : ReturnUrl, 0, 1, JWT_TOKEN_NAME, JWT_TOKEN_EXP_DATE_NAME);
 
            // converted seconds to milliseconds by multiplying by 1000
            await jsRuntime.InvokeVoidAsync("SESSION_FUNCTIONS.run", string.IsNullOrWhiteSpace(ReturnUrl) ? NavigationManager.BaseUri : ReturnUrl, Seconds * 1000, 2, JWT_TOKEN_NAME, JWT_TOKEN_EXP_DATE_NAME);
        }
    }
}
 
 
 
 
