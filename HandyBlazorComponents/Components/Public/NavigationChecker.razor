 
 
@code {
    [Parameter]
    public int Seconds { get;set; } = 30;
    [Parameter]
    public string JWT_TOKEN_NAME {get;set;} = "jwt";
    [Parameter]
    public string JWT_TOKEN_EXP_DATE {get;set;} = "expDate";
    [Parameter]
    public string ReturnUrl {get;set;} = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // test run of adding a dummy timestamp
            // await jsRuntime.InvokeVoidAsync("localStorage.setItem", JWT_TOKEN_EXP_DATE, new DateTimeOffset(DateTime.Now.AddSeconds(55)).ToUnixTimeMilliseconds());
            await jsRuntime.InvokeVoidAsync("SESSION_FUNCTIONS.run", string.IsNullOrWhiteSpace(ReturnUrl) ? NavigationManager.BaseUri : ReturnUrl, 0, 1, JWT_TOKEN_NAME, JWT_TOKEN_EXP_DATE);
 
            // converted seconds to milliseconds by multiplying by 1000
            await jsRuntime.InvokeVoidAsync("SESSION_FUNCTIONS.run", string.IsNullOrWhiteSpace(ReturnUrl) ? NavigationManager.BaseUri : ReturnUrl, Seconds * 1000, 2, JWT_TOKEN_NAME, JWT_TOKEN_EXP_DATE);
        }
    }
}
 
 
 
 
