@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager NavigationManager

@* TODO: copy over to fwc HandyBlazorComponents *@
<div class="container">
    <EditForm Model="@handyLoginModel" OnValidSubmit="HandleSubmit">
        <div class="card">
            <h4 class="card-header">Login</h4>
            <div class="card-body">
                <DataAnnotationsValidator />
                <p class="form-group">
                    <label for="email">Email</label>
                    <InputText id="email" class="form-control" @bind-Value="handyLoginModel.Email" />
                    <ValidationMessage For="@(() => handyLoginModel.Email)" />
                </p>
                <p class="form-group">
                    <label for="password">Password</label>
                    <div class="input-group">
                    <InputText id="password" class="form-control" @bind-Value="handyLoginModel.Password" type="@passwordType" />
                        <div class="input-group-append">
                            <div class="input-group-addon">
                                <span class="input-group-text">
                                    <a 
                                    @onclick="@((m)=> TogglePasswordVisibility(m))"@onkeypress="TogglePasswordVisibility" @onkeypress:preventDefault="true" tabindex="0" style="color: black; cursor: pointer;">
                                        <i class="fa @iconClass field-icon m-1" aria-hidden="true"></i></a>
                                </span>
                            </div>
                        </div>
                    </div>
                    <ValidationMessage For="@(() => handyLoginModel.Password)" />
                </p>
            </div>
        </div>
        <div class="m-3">
            <p class="form-check m-3">
                <input class="form-check-input" @bind="handyLoginModel.RememberMe" type="checkbox" id="flexCheckDefault">
                <label class="form-check-label" for="flexCheckDefault">
                    Remember Me
                </label>
            </p>
            <p class="m-3">
                <button disabled="@(cooldownTimer?.IsCoolingDown ?? false)" class="btn btn-primary">
                    @if (loading)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Login
                </button>
                @if (!string.IsNullOrWhiteSpace(errMsg))
                {
                    <p class="text-danger m-3">
                        @errMsg
                    </p>
                }

                @if (!string.IsNullOrWhiteSpace(attemptsNotice))
                {
                    <p class="text-danger m-3">
                        @attemptsNotice
                    </p>
                }
            </p>
        </div>
    </EditForm>
</div>
<div class="text-center">
    <p style="font-weight: bold;">
        @NoticeText
    </p>
</div>

<CooldownTimer @ref="cooldownTimer" CooldownTime="CooldownSeconds" MaxAttempts="MaxAttempts" OnCooldownComplete="@(() => {
    attempts = 0;
    errMsg = ""; // Clear any previous error messages
    attemptsNotice = "";
    StateHasChanged();
})" />

@code {
    [Parameter]
    public int CooldownSeconds {get;set;} = 30;
    [Parameter]
    public int MaxAttempts {get;set;} = 5;
    [Parameter]
    public string NoticeText {get;set;} = string.Empty;
    [Parameter]
    public string RedirectLink {get;set;} = string.Empty;
    [Parameter]
    public Func<HandyLoginModel, Task<HandyLoginResponse>> LoginCallBack {get;set;} 
    private CooldownTimer cooldownTimer = default!;
    private HandyLoginModel handyLoginModel = new();
    private bool isPasswordVisible = false;
    private string passwordType => isPasswordVisible ? "text" : "password";
    private string iconClass => isPasswordVisible ? "fa-eye" : "fa-eye-slash";
    private bool loading = false;

    private string errMsg = "";
    private string attemptsNotice = "";
    private int attempts = 0;


    private void TogglePasswordVisibility(MouseEventArgs mouseEventArgs)
    {
        if (mouseEventArgs != null)
        {
            isPasswordVisible = !isPasswordVisible;
        }
    }

    private async Task TogglePasswordVisibility(KeyboardEventArgs e)
    {
        // Check if the pressed key is either "Space" or "Enter"
        if (e.Key == " " || e.Key == "Enter")
        {
            // Toggle the password visibility
            isPasswordVisible = !isPasswordVisible;
        }
    }

    private async Task HandleSubmit()
    {
        loading = true;
        errMsg = ""; // Clear any previous error messages
        attemptsNotice = "";
        // Handle login logic here
        //Console.WriteLine(MaxAttempts);
        attempts += 1;
        var loginCallBack = await LoginCallBack(handyLoginModel);
        loading = false;
        if (!loginCallBack.Flag)
        {
            cooldownTimer.IncrementSubmissionCount();
            errMsg = loginCallBack.Message;
            attemptsNotice = $"{attempts} of {MaxAttempts} attempts";
            return;
        }
        NavigationManager.NavigateTo(RedirectLink, true);
    }
}
