<div class="searchable-dropdown" style="@Style" @onfocusin="() => IsDropdownVisible = true"
    @onfocusout="HandleFocusOut">

    <input type="text" class="form-control" @bind="SearchTerm" @bind:event="oninput" placeholder="@Placeholder"
        @onkeydown="@HandleInputKeyDown" />

    @if (IsDropdownVisible)
    {
        <ul class="dropdown-menu show" tabindex="-1" style="width: 100%; max-height: 200px; overflow-y: auto;"
            @onclick:stopPropagation>
            @if (FilteredOptions?.Any() == true)
            {
                @for (int i = 0; i < FilteredOptions.Count; i++)
                {
                    var cur = i;
                    var item = FilteredOptions[i];
                    <li tabindex="0" class="dropdown-item p-3" @onclick="() => SelectItem(item.Value)"
                        @onkeydown="@((e) => HandleItemKeyDown(e, item.Value))">
                        @item.Text
                    </li>
                }
            }
            else
            {
                <li class="dropdown-item text-muted">No results</li>
            }
        </ul>
    }
</div>

@code {
    [Parameter]
    public List<HandyNamedTuple> Options { get; set; } = [];
    [Parameter] public EventCallback<string> OnOptionSelected { get; set; }
    [Parameter] public string Placeholder { get; set; } = "Search...";

    [Parameter]
    public string Style { get; set; } = "width: 10rem";

    private string SearchTerm { get; set; } = "";

    private bool IsDropdownVisible { get; set; } = false;

    private List<HandyNamedTuple> FilteredOptions => string.IsNullOrWhiteSpace(SearchTerm)
    ? Options
    : Options.Where(i => i.Value.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase)).ToList();

    private void SelectItem(string item)
    {
        SearchTerm = item;
        IsDropdownVisible = false;
        OnOptionSelected.InvokeAsync(item);
    }

    private async Task HandleInputKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Escape")
        {
            IsDropdownVisible = false;
        }
    }

    private void HandleItemKeyDown(KeyboardEventArgs e, string item)
    {
        switch (e.Key)
        {
            case "Enter":
            case " ":
                SelectItem(item);
                break;
        }
    }

    private async Task HandleFocusOut(FocusEventArgs e)
    {
        await Task.Delay(100);
        var active = await jsRuntime.InvokeAsync<string>("getActiveElementClass");
        if (!active.Contains("dropdown-item") && !active.Contains("form-control"))
        {
            IsDropdownVisible = false;
            StateHasChanged();
        }
    }
}


<style>
    .searchable-dropdown {
        position: relative;
        width: 100%;
    }

    .searchable-dropdown .dropdown-menu {
        display: block;
        position: absolute;
        z-index: 1000;
    }

    .dropdown-item {
        cursor: pointer;
    }
</style>
