@* TODO: Copy over to FWC Handyblazorcomponents *@

@* @typeparam TItem where TItem : class, new()
 
@if (!string.IsNullOrWhiteSpace(Label))
{
    <div class="m-3 p-3" style="background-color: lightblue;">
        @Label
    </div>
}
 
<Editor ScriptSrc="@ScriptSrc" Value="@EditorContent" ValueChanged="OnValueChanged" LicenseKey="gpl" Conf="EditorConf"/>
 
<button class="btn btn-primary m-3" @onclick="SaveInfo">Confirm Changes</button>
 
 
@code {
 
    private Dictionary<string, object> EditorConf = new(){
        {"plugins", "table wordcount image media code"},
        {"toolbar", "image | undo redo | media | code | forecolor backcolor"},
        {"image_file_types" , "jpg, .png"},
    };

    [Parameter]
    public string ScriptSrc {get;set;} = "lib/tinymce/tinymce.min.js";
 
    [Parameter]
    public string? Label  {get;set;} = null!;
 
    [Parameter]
    public TItem Item { get; set; } = null!; // The object being edited
 
    [Parameter]
    public string ColumnName { get; set; } = null!; // The name of the property to bind to
 
    [Parameter]
    public EventCallback<string?> OnPageDirtyChanged  { get; set; }
 
    [Parameter]
    public EventCallback<string?> OnEditorSave { get; set; }
 
    private string? EditorContent { get; set; }
 
    protected override void OnInitialized()
    {
        EditorContent = GetPropertyValue(Item, ColumnName)?.ToString();
    }
 
    // allow the new content to reload into the text editor
    //protected override void OnParametersSet()
    //{
    //    EditorContent = GetPropertyValue(Item, ColumnName)?.ToString();
    //}
 
    private async Task OnValueChanged(string? value)
    {
        // Console.WriteLine("here");
        EditorContent = value;
        await OnPageDirtyChanged.InvokeAsync(value);
    }
 
    private async Task SaveInfo()
    {
        await OnEditorSave.InvokeAsync(EditorContent);
    }
 
    private string? GetPropertyValue(TItem item, string propertyName)
    {
        return typeof(TItem).GetProperty(propertyName)?.GetValue(item)?.ToString();
    }
} *@