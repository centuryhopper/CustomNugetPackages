@typeparam TItem where TItem : class, IHandyGridEntity, new()
@using System.Linq.Expressions


@* This grid has pagination and filtering and sorting along with all CRUD operations *@

<div class="text-center overflow-auto m-3">
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>
                    Row #
                </th>
                <th>
                    Actions
                </th>
                @foreach (var column in Columns)
                {
                    <th>
                        <button @onclick="@(() => SortData(column))" class="btn btn-primary">
                            @column @GetSortIcon(column)
                        </button>
                        <TextInputFilter Value="@GetFilterValue(column)"
                            ValueChanged="@(value => SetFilterValue(column, value))" PlaceHolder=@($"Filter by {column}") />
                    </th>
                }
                <th>UPDATE</th>
                <th>DELETE</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < pagedItemsHelper.Count; i++)
            {
                int rowIdx = i;
                <tr>
                    <td>
                        <div style="width: 2.5rem;">
                            @rowIdx
                        </div>
                    </td>
                    <td>
                        @if (AllowEdits[rowIdx])
                        {
                            <button @onclick="@(() => CancelEdit(rowIdx, pagedItemsHelper[rowIdx]))"
                                class="btn btn-primary">Cancel</button>
                        }
                        else
                        {
                            <button @onclick="@(() => BeginEdit(rowIdx))" class="btn btn-primary">Edit</button>
                        }
                    </td>
                    @foreach (var (columnIdx, columnName) in Columns.Select((columnName, columnIdx) => (columnIdx,
                   columnName)))
                    {
                        <td>
                            @* edit mode cases *@
                            @if (!ReadonlyColumns.Contains(columnName) && AllowEdits[rowIdx])
                            {
                                @if (EditModeFragments != null && EditModeFragments.TryGetValue(columnName, out var template))
                                {
                                    <div class="d-flex align-items-center p-3">
                                        @template(pagedItemsHelper[rowIdx])
                                    </div>
                                }
                                else
                                {
                                    <div class="d-flex align-items-center p-3">
                                        <input value="@(GetPropertyValue(pagedItemsHelper[rowIdx], columnName))"
                                            @oninput="(e) => SetPropertyValue(pagedItemsHelper[rowIdx], e.Value, columnName)"
                                            class="form-control" style="width: 10rem" />
                                    </div>
                                }
                            }
                            @* view mode cases *@
                            else
                            {
                                @if (ViewModeFragments != null && ViewModeFragments.TryGetValue(columnName, out var template))
                                {
                                    @template(pagedItemsHelper[rowIdx])
                                }
                                else
                                {
                                    <span>@GetPropertyValue(pagedItemsHelper[rowIdx], columnName)</span>
                                }
                            }

                            <span class="text-danger">@ErrorMessages[rowIdx, columnIdx]</span>
                        </td>
                    }
                    <td>
                        <button disabled="@(!AllowEdits[rowIdx])"
                            @onclick="@(() => UpdateRow(rowIdx, pagedItemsHelper[rowIdx]))"
                            class="btn btn-primary">Update</button>
                    </td>
                    <td>
                        <button @onclick="@(() => DeleteRow(pagedItemsHelper[rowIdx]))"
                            class="btn btn-danger">DELETE</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<ConfirmModal @ref="confirmModal" Title="Warning"
    BodyText="Are you sure you want to delete this record? THIS ACTION IS IRREVERSIBLE!" />
<CustomPagination CurrentPage="CurrentPage" TotalPages="TotalPages" OnPageChanged="OnPageChanged" />

<AddDynamicItemsModal TItem="TItem" @ref="AddDynamicItemsModal" />

<button class="btn btn-primary" @onclick="AddNewItems">Add New Items</button>

<div class="m-3">
    <button class="btn btn-info" @onclick="ExportTableAsCsv">Export Table as CSV</button>
</div>

<NotificationModal @ref="notificationModal" />

<UploadComponent TItem="TItem" TMapper="TestClassMapper"/>

@code {
    ConfirmModal confirmModal = default!;
    NotificationModal notificationModal = default!;
    AddDynamicItemsModal<TItem> AddDynamicItemsModal = default!;

    [CascadingParameter(Name = nameof(ValidationChecks))]
    Func<TItem, List<string>, GridValidationResponse> ValidationChecks { get; set; }

    [CascadingParameter(Name = nameof(EditModeFragments))]
    public Dictionary<string, RenderFragment<TItem>>? EditModeFragments { get; set; }

    [Parameter]
    public Dictionary<string, RenderFragment<TItem>>? ViewModeFragments { get; set; }

    [Parameter]
    public List<TItem> Items { get; set; } = new();

    [Parameter]
    public EventCallback<List<TItem>> OnCreate { get; set; }
    [Parameter]
    public EventCallback<TItem> OnUpdate { get; set; }
    [Parameter]
    public EventCallback<TItem> OnDelete { get; set; }
    [CascadingParameter(Name = nameof(ReadonlyColumns))]
    public List<string> ReadonlyColumns { get; set; }



    [Parameter]
    public int CurrentPage { get; set; } = 1;

    private const int pageSize = 5; // Number of items per page
    private int TotalPages => (int)Math.Ceiling((double)filteredItems.Count() / pageSize);

    private List<bool> AllowEdits = new();
    private Dictionary<string, string> FilterValues { get; set; } = new();
    private List<string>? Columns { get; set; }
    private IEnumerable<TItem> filteredItems =>
    Items.Where(item => FilterQuery(item));

    private List<TItem> pagedItems = new();
    /// <summary>
    /// A temp list in the dynamic handy grid so that the cancel function can be used to revert back the old values in the
    /// original grid.
    /// Used in case we want to revert a change.
    /// </summary>
    /// <returns></returns>
    private List<TItem> pagedItemsHelper = new();
    private string sortColumn;
    private bool sortAscending = true;
    private List<TItem> ItemsToAdd = new();

    private string[,] _errorMessages;

    private string[,] ErrorMessages
    {
        get
        {
            if (_errorMessages == null || _errorMessages.GetLength(0) != pagedItemsHelper.Count || _errorMessages.GetLength(1) !=
            (Columns?.Count ?? 0))
            {
                _errorMessages = new string[pagedItemsHelper.Count, Columns?.Count ?? 0];
            }
            return _errorMessages;
        }
        set => _errorMessages = value;
    }

    private async Task AddNewItems()
    {
        ItemsToAdd = await AddDynamicItemsModal.ShowAsync();
        //ItemsToAdd.ForEach(item => Console.WriteLine(item));
        int maxId = Items.Max(o=>o.GetPrimaryKey());
        if (ItemsToAdd.Any())
        {
            for (int i = 0;i < ItemsToAdd.Count;i++)
            {
                ItemsToAdd[i].SetPrimaryKey(maxId+1);
                maxId++;
            }

            Items.AddRange(ItemsToAdd);

            // server call
            await OnCreate.InvokeAsync(ItemsToAdd);
        }
    }

    // Handle page change event
    private void OnPageChanged(int newPage)
    {
        //Console.WriteLine("newPage: " + newPage);
        CurrentPage = newPage;
        UpdatePagedItems();
        //StateHasChanged();
    }

    private void SortData(string columnName)
    {
        if (sortColumn == columnName)
        {
            sortAscending = !sortAscending; // Toggle sort direction
        }
        else
        {
            sortColumn = columnName; // Set new column to sort
            sortAscending = true; // Default to ascending
        }

        UpdatePagedItems();
    }

    private List<TItem> DeepCopy(List<TItem> originalLst)
    {
        List<TItem> deepCopy = new List<TItem>();
        foreach (var originalItem in originalLst)
        {
            var copy = new TItem();
            foreach (var columnName in Columns)
            {
                if (columnName == "Descriptions")
                {
                    ;
                }
                var originalValue = GetPropertyValue(originalItem, columnName);
                SetPropertyValue(copy, originalValue, columnName);
            }
            // Manually copy properties from item to copy if necessary
            deepCopy.Add(copy);
        }
        return deepCopy;
    }

    private void UpdatePagedItems()
    {
        var itemsQuery = filteredItems.AsQueryable();

        // Apply sorting using reflection
        if (!string.IsNullOrWhiteSpace(sortColumn))
        {
            var param = Expression.Parameter(typeof(TItem), "item");
            var property = Expression.PropertyOrField(param, sortColumn);
            var sortExpression = Expression.Lambda<Func<TItem, object>>(
            Expression.Convert(property, typeof(object)), param
            );

            itemsQuery = sortAscending ? itemsQuery.OrderBy(sortExpression) : itemsQuery.OrderByDescending(sortExpression);
        }

        pagedItems = itemsQuery.Skip((CurrentPage - 1) * pageSize).Take(pageSize).ToList();
        pagedItemsHelper = DeepCopy(pagedItems);
        AllowEdits = Enumerable.Repeat(false, pagedItems.Count).ToList();
        // Console.WriteLine(AllowEdits.Count);

    }

    private bool FilterQuery(TItem item)
    {
        bool nullOrWhiteSpaceCheck = FilterValues.Values.All(
        filter => string.IsNullOrWhiteSpace(filter)
        );

        bool containsCheck = Columns
        .Any(column =>
        !string.IsNullOrWhiteSpace(FilterValues[column]) &&
        GetPropertyValue(item, column).ToString().Contains(FilterValues[column], StringComparison.OrdinalIgnoreCase));

        return nullOrWhiteSpaceCheck || containsCheck;
    }

    protected override void OnParametersSet()
    {
        UpdatePagedItems();
        // Console.WriteLine("parameters changed");
    }

    protected override void OnInitialized()
    {
        Columns = typeof(TItem).GetProperties().Select(prop => prop.Name).ToList();
        foreach (var column in Columns)
        {
            FilterValues.Add(column, string.Empty);
        }
        UpdatePagedItems();
        //Filters = Enumerable.Repeat(string.Empty, Columns.Count).ToList();
        // Columns.ForEach(c=>Console.WriteLine(c));
    }

    private object? GetPropertyValue(TItem item, string propertyName)
    {
        //Console.WriteLine(item);
        dynamic value = typeof(TItem).GetProperty(propertyName)?.GetValue(item);
        if (value is IEnumerable<string>)
        {
            return string.Join(",", value);
        }

        return value;
    }

    private void SetPropertyValue(TItem item, object? value, string propertyName)
    {
        var property = typeof(TItem).GetProperty(propertyName);
        if (property != null && property.CanWrite)
        {
            var propertyType = property.PropertyType;

            // Null handling for nullable types
            if (value == null)
            {
                if (Nullable.GetUnderlyingType(propertyType) != null)
                {
                    property.SetValue(item, null);
                }
                return;
            }

            try
            {
                // Special handling for DateTime and Nullable<DateTime>
                if (propertyType == typeof(DateTime) || propertyType == typeof(DateTime?))
                {
                    if (value is string stringValue && DateTime.TryParse(stringValue, out DateTime parsedDate))
                    {
                        property.SetValue(item, parsedDate);
                    }
                    else if (value is DateTime dateTimeValue)
                    {
                        property.SetValue(item, dateTimeValue);
                    }
                    else if (propertyType == typeof(DateTime?))
                    {
                        property.SetValue(item, null); // Set nullable DateTime to null if invalid
                    }
                }
                // Handle integer types
                else if (propertyType == typeof(int) || propertyType == typeof(int?))
                {
                    property.SetValue(item, Convert.ToInt32(value));
                }
                // Handle float types
                else if (propertyType == typeof(float) || propertyType == typeof(float?))
                {
                    property.SetValue(item, Convert.ToSingle(value));
                }
                // Handle double types
                else if (propertyType == typeof(double) || propertyType == typeof(double?))
                {
                    property.SetValue(item, Convert.ToDouble(value));
                }
                // Handle decimal types
                else if (propertyType == typeof(decimal) || propertyType == typeof(decimal?))
                {
                    property.SetValue(item, Convert.ToDecimal(value));
                }
                // Handle boolean types
                else if (propertyType == typeof(bool) || propertyType == typeof(bool?))
                {
                    property.SetValue(item, Convert.ToBoolean(value));
                }
                // Handle enums
                else if (propertyType.IsEnum)
                {
                    if (value is string enumString && Enum.TryParse(propertyType, enumString, true, out var enumValue))
                    {
                        property.SetValue(item, enumValue);
                    }
                    else if (value.GetType().IsEnum && Enum.IsDefined(propertyType, value))
                    {
                        property.SetValue(item, value);
                    }
                }
                // Handle nullable enums
                else if (Nullable.GetUnderlyingType(propertyType)?.IsEnum == true)
                {
                    var underlyingType = Nullable.GetUnderlyingType(propertyType);
                    if (value is string nullableEnumString && Enum.TryParse(underlyingType, nullableEnumString, true, out var
                    nullableEnumValue))
                    {
                        property.SetValue(item, nullableEnumValue);
                    }
                }
                // Handle List<string> specifically
                else if (propertyType == typeof(List<string>))
                {
                    if (value is string str)
                    {
                        // Convert comma-separated string to List<string>
                        var list = str.Split(',').Select(s => s.Trim()).Where(s=>!string.IsNullOrWhiteSpace(s)).ToList();
                        property.SetValue(item, list);
                    }
                    else if (value is IEnumerable<string> stringEnumerable)
                    {
                        // If value is already an IEnumerable<string>, convert to List<string>
                        property.SetValue(item, stringEnumerable.ToList());
                    }
                }
                // Handle other IEnumerable<T> types
                else if (propertyType.IsGenericType && propertyType.GetGenericTypeDefinition() == typeof(List<>))
                {
                    var elementType = propertyType.GetGenericArguments()[0];
                    var method = typeof(Enumerable).GetMethod("Cast")?.MakeGenericMethod(elementType);
                    var toListMethod = typeof(Enumerable).GetMethod("ToList")?.MakeGenericMethod(elementType);

                    if (method != null && toListMethod != null && value is IEnumerable<object> enumerable)
                    {
                        var castedEnumerable = method.Invoke(null, new[] { enumerable });
                        var list = toListMethod.Invoke(null, new[] { castedEnumerable });
                        property.SetValue(item, list);
                    }
                }
                // Handle other directly convertible types
                else
                {
                    property.SetValue(item, Convert.ChangeType(value, propertyType));
                }
            }
            catch (Exception ex)
            {
                // Handle or log exception if needed
                Console.WriteLine($"Failed to set property {propertyName}: {ex.Message}");
            }
        }
    }


    private async Task UpdateRow(int rowIdx, TItem item)
    {
        // find out rows that have errors
        var validation = ValidationChecks(item, Columns);
        if (!validation.Flag)
        {
            // reset
            // getlength(1) returns number of columns
            // getlength(0) returns number of rows
            for (var columnIdx = 0; columnIdx < ErrorMessages.GetLength(1); columnIdx++)
            {
                ErrorMessages[rowIdx, columnIdx] = "";
            }

            // show errors
            foreach (var kvp in validation.ErrorMessagesDict)
            {
                //Console.WriteLine(kvp.Key);
                ErrorMessages[rowIdx, kvp.Key] = string.Join(",", kvp.Value);
            }
        }
        else
        {
            for (var columnIdx = 0; columnIdx < ErrorMessages.GetLength(1); columnIdx++)
            {
                ErrorMessages[rowIdx, columnIdx] = "";
            }
        }


        // checks if any of the cells still has errors
        if (ErrorMessages.Cast<string>().Any(errMsg => !string.IsNullOrWhiteSpace(errMsg)))
        {
            return;
        }

        for (int i = 0; i < Items.Count; i++)
        {
            if (Items[i].GetPrimaryKey() == item.GetPrimaryKey())
            {
                foreach (var columnName in Columns)
                {
                    SetPropertyValue(Items[i], item, columnName);
                }
            }
        }

        await OnUpdate.InvokeAsync(item);
    }

    private async Task DeleteRow(TItem item)
    {
        //Console.WriteLine(item.GetPrimaryKey());
        var itemToRemove = Items.FirstOrDefault(o=>o.GetPrimaryKey() == item.GetPrimaryKey());
        if (itemToRemove != null)
        {
            Items.Remove(itemToRemove);
        }
        Console.WriteLine(Items.Count);
        await OnDelete.InvokeAsync(item);
    }

    private async Task CancelEdit(int rowIdx, TItem item)
    {
        // clear error messages
        for (var columnIdx = 0; columnIdx < ErrorMessages.GetLength(1); columnIdx++)
        {
            ErrorMessages[rowIdx, columnIdx] = "";
        }

        foreach (var columnName in Columns)
        {
            SetPropertyValue(pagedItemsHelper[rowIdx], GetPropertyValue(pagedItems[rowIdx], columnName), columnName);
        }

        AllowEdits[rowIdx] = false;
    }

    private async Task BeginEdit(int rowIdx)
    {
        AllowEdits[rowIdx] = true;
    }

    private string GetFilterValue(string column)
    {
        //Console.WriteLine(column);
        //Console.WriteLine(FilterValues[column]);
        return FilterValues.ContainsKey(column) ? FilterValues[column] : "";
    }

    private void SetFilterValue(string column, string value)
    {
        //Console.WriteLine("setting: " + column + " to " + value);
        FilterValues[column] = value;
        FilterItems();
    }

    private void FilterItems()
    {
        // Filtering logic based on FilterValues
        CurrentPage = 1;
        UpdatePagedItems();
    }

    private string GetSortIcon(string columnName)
    {
        return sortColumn == columnName ? (sortAscending ? "↑" : "↓") : string.Empty; // Return an up or down arrow based on
    }

    private async Task ExportTableAsCsv()
    {
        var result = string.Join(",", Columns);
        result += '\n';
        foreach (var acc in Items)
        {
            var stringified = Columns.Select(col => GetPropertyValue(acc, col).ToString()?.Replace(",", "+"));
            result += $"{string.Join(",", stringified)}\n";
        }
        await jsRuntime.InvokeVoidAsync("saveAsFile", "data.csv", result);
    }

}
