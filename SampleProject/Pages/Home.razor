@page "/"

<PageTitle>DEMO</PageTitle>

<ConfirmModal @ref="confirmModal" Title="Warning"
    BodyText="Are you sure you want to delete this record? THIS ACTION IS IRREVERSIBLE!" />

<NotificationModal @ref="notificationModal" />


<div class="m-5">
    <label>Confirmation Modal Demo:</label>
    <button class="btn btn-primary" @onclick="ConfirmButton">
        Confirm Test
    </button>
    <p class="mt-3" style="font-size: 1.25rem;">Confirmation Message: @Message</p>
    <hr>
    <label>Notification Modal demo:</label>
    <div class="row">
        <div class="col">
            <button class="btn btn-primary" @onclick="ShowInfoNotification">
                Show Info Popup
            </button>
        </div>
        <div class="col">
            <button class="btn btn-primary" @onclick="ShowWarningNotification">
                Show Warning Popup
            </button>
        </div>
        <div class="col">
            <button class="btn btn-primary" @onclick="ShowSuccessNotification">
                Show Success Popup
            </button>
        </div>
        <div class="col">
            <button class="btn btn-primary" @onclick="ShowErrorNotification">
                Show Error Popup
            </button>
        </div>
    </div>
    <hr>
    <label>Cooldown Timer Demo:</label>
    <button disabled="@(cooldownTimer?.IsCoolingDown ?? false)" class="btn btn-primary" @onclick="IncrementAttempt">
        @* @if (cooldownTimer?.IsCoolingDown ?? false)
        {
            <span class="spinner-border spinner-border-sm mr-1"></span>
        } *@
        Click Me
    </button>
    <CooldownTimer @ref="cooldownTimer" CooldownTime="10" MaxAttempts="5" OnCooldownComplete="()=>StateHasChanged()" />

    <hr>
    <div>HandyGrid demo:</div>

    <HandyGrid Items="TestLst" OnAction="OnAction"/>

</div>

@code {
    private class TestClass
    {
        public int Id {get;set;}
        public string Title {get;set;}
        public string Description {get;set;}

        public override string ToString()
        {
            return $"{Id}, {Title}, {Description}";
        }
    }
    private List<TestClass> TestLst = [
        new TestClass { Id=0, Title = "Title1", Description = "Description1",},
        new TestClass { Id=1, Title = "Title2", Description = "Description2",}
    ];

    private async Task OnAction((object, string) data)
    {
        object obj = data.Item1;
        var actionType = data.Item2;
        switch (actionType)
        {
            case "update":
                for (int i = 0; i < TestLst.Count; i++)
                {
                    if (TestLst[i].Id == ((TestClass) obj).Id)
                    {
                        TestLst[i].Title = ((TestClass) obj).Title;
                        TestLst[i].Description = ((TestClass) obj).Description;
                    }
                }
                break;
            case "delete":
                var response = await confirmModal.ShowAsync();
                TestLst = TestLst.Where(o=>o.Id != ((TestClass) obj).Id).ToList();
                break;
        }
        

        TestLst.ForEach(c=>Console.WriteLine(c));
    }

    private ConfirmModal confirmModal = default!;
    private NotificationModal notificationModal = default!;
    private CooldownTimer cooldownTimer = default!;
    private string Message { get; set; } = "";

    //protected override void OnAfterRender(bool firstRender)
    //{
    //    if (!firstRender)
    //    {
    //       Console.WriteLine(cooldownTimer.IsCoolingDown);
    //    }
    //}

    private async Task IncrementAttempt()
    {
        cooldownTimer.IncrementSubmissionCount();
    }

    private async Task ConfirmButton()
    {
        var response = await confirmModal.ShowAsync();
        Message = response ? "confirmed" : "canceled";
    }
    private async Task ShowInfoNotification()
    {
        await notificationModal.ShowInfoAsync("Notice!", "This an info popup");
    }
    private async Task ShowWarningNotification()
    {
        await notificationModal.ShowWarningAsync("Warning!", "This a Warning popup");
    }
    private async Task ShowErrorNotification()
    {
        await notificationModal.ShowErrorAsync("Notice!", "This an Error popup");
    }
    private async Task ShowSuccessNotification()
    {
        await notificationModal.ShowSuccessAsync("Notice!", "This a succcess popup");
    }
}
