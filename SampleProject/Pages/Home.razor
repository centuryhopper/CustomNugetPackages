@page "/"
@inject NavigationManager NavigationManager
@using System.Linq

<PageTitle>DEMO</PageTitle>

<ConfirmModal @ref="confirmModal" Title="Warning"
    BodyText="Are you sure you want to delete this record? THIS ACTION IS IRREVERSIBLE!" />

<NotificationModal @ref="notificationModal" />


<div class="m-5">
    <label>Confirmation Modal Demo:</label>
    <button class="btn btn-primary" @onclick="ConfirmButton">
        Confirm Test
    </button>
    <p class="mt-3" style="font-size: 1.25rem;">Confirmation Message: @Message</p>
    <hr>
    <label>Notification Modal demo:</label>
    <div class="row">
        <div class="col">
            <button class="btn btn-primary" @onclick="@(()=>ShowNotification("Notice!", "This is an info pop up", ModalType.INFO))">
                Show Info Popup
            </button>
        </div>
        <div class="col">
            <button class="btn btn-primary" @onclick="@(()=>ShowNotification("Warning!", "This is a warning pop up", ModalType.WARNING))">
                Show Warning Popup
            </button>
        </div>
        <div class="col">
            <button class="btn btn-primary" @onclick="@(()=>ShowNotification("Success!", "This is a success pop up", ModalType.SUCCESS))">
                Show Success Popup
            </button>
        </div>
        <div class="col">
            <button class="btn btn-primary" @onclick="@(()=>ShowNotification("Error!", "This is an error pop up", ModalType.ERROR))">
                Show Error Popup
            </button>
        </div>
    </div>
    <hr>
    <label>Cooldown Timer Demo:</label>
    <button disabled="@(cooldownTimer?.IsCoolingDown ?? false)" class="btn btn-primary" @onclick="IncrementAttempt">
        Click Me
    </button>
    <CooldownTimer @ref="cooldownTimer" CooldownTime="10" MaxAttempts="5" OnCooldownComplete="()=>StateHasChanged()" />

    <hr>
    <div>Number only input demo:</div>
    <input type="number" class="form-control" style="width: 10rem;" onkeypress="return (event.charCode !=8 && event.charCode ==0 || (event.charCode >= 48 && event.charCode <= 57)/* || event.charCode == 45 uncomment to allow negative values*/)">

    <hr>
    <div>Dynamic HandyGrid demo:</div>

    @if (doneLoadingLst)
    {
        <DynamicHandyGrid @ref="dynamicHandyGrid" TItem="TestClass" Items="TestLst" OnCreate="OnCreate" OnUpdate="OnUpdate" OnDelete="OnDelete" ColumnItems="ColumnItems"/>
    }
    else
    {
        <span class="spinner-border spinner-border-sm mr-1"></span>
    }

</div>

@code {

    private class TestClass
    {
        public int Id {get;set;}
        public string Title {get;set;} = string.Empty;
        public string Description {get;set;} = string.Empty;
        public List<string> Descriptions {get;set;} = new();

        public override string ToString()
        {
            return $"{Id}, {Title}, {Description}";
        }
    }

    private Dictionary<string, RenderFragment<TestClass>> ColumnItems => new()
    {
        {
            "Id",
            o => @<input type="number" class="form-control" style="width: 10rem;" onkeypress="return (event.charCode !=8 && event.charCode ==0 || (event.charCode >= 48 && event.charCode <= 57)/* || event.charCode == 45 uncomment to allow negative values*/)" @bind="o.Id" placeholder="Enter Id">
        },
        {
            "Title",
            o => @<input class="form-control" @bind="o.Title" placeholder="Enter Title" />
        },
        {
            "Description",
            o => @<input class="form-control" @bind="o.Description" placeholder="Enter Description" />
        },
        {
            "Descriptions",
            o => @<MultiSelectCheckBoxList
                    TItem="TestClass"
                    Items="states.ToList()"
                    SelectedItems="o.Descriptions"
                    Placeholder="Select States" />
        }
    };

    private string[] states =
    {
        "Alabama", "Alaska", "American Samoa", "Arizona",
        "Arkansas", "California", "Colorado", "Connecticut",
        "Delaware", "District of Columbia", "Federated States of Micronesia",
        "Florida", "Georgia", "Guam", "Hawaii", "Idaho",
        "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky",
        "Louisiana", "Maine", "Marshall Islands", "Maryland",
        "Massachusetts", "Michigan", "Minnesota", "Mississippi",
        "Missouri", "Montana", "Nebraska", "Nevada",
        "New Hampshire", "New Jersey", "New Mexico", "New York",
        "North Carolina", "North Dakota", "Northern Mariana Islands", "Ohio",
        "Oklahoma", "Oregon", "Palau", "Pennsylvania", "Puerto Rico",
        "Rhode Island", "South Carolina", "South Dakota", "Tennessee",
        "Texas", "Utah", "Vermont", "Virgin Island", "Virginia",
        "Washington", "West Virginia", "Wisconsin", "Wyoming",
    };
    
    private List<TestClass> TestLst {get;set;}

    private bool doneLoadingLst = false;
    private DynamicHandyGrid<TestClass> dynamicHandyGrid = default!;

    protected override void OnInitialized()
    {
        TestLst = [
            new TestClass { Id=1, Title = "Title01", Description = "Description01", Descriptions = ["Texas","Utah","Vermont"],},
            new TestClass { Id=2, Title = "Title02", Description = "Description02", Descriptions = [],},
            
            new TestClass { Id=3, Title = "Title03", Description = "Description03", Descriptions = [],},
            new TestClass { Id=4, Title = "Title04", Description = "Description04", Descriptions = [],},

            new TestClass { Id=5, Title = "Title05", Description = "Description05", Descriptions = [],},
            new TestClass { Id=6, Title = "Title06", Description = "Description06", Descriptions = [],},

            new TestClass { Id=7, Title = "Title07", Description = "Description07", Descriptions = [],},
            new TestClass { Id=8, Title = "Title08", Description = "Description08", Descriptions = [],},

            // new TestClass { Id=9, Title = "Title09", Description = "Description09",},
            // new TestClass { Id=10, Title = "Title10", Description = "Description10",},

        ];

        // Console.WriteLine(modalType.ToString());

        doneLoadingLst = true;
    }

    private async Task OnCreate(List<TestClass> items)
    {
        TestLst.AddRange(items);
        // TODO: apply changes here to db in real-world scenario as well

    }

    private async Task OnDelete(TestClass item)
    {
        // var response = await confirmModal.ShowAsync();
        if (true)
        {
            TestLst = TestLst.Where(o=>o.Id != item.Id).ToList();
            // TODO: apply changes here to db in real-world scenario as well

        }
    }

    private async Task OnUpdate(TestClass item)
    {
        for (int i = 0; i < TestLst.Count; i++)
        {
            if (TestLst[i].Id == item.Id)
            {
                TestLst[i].Title = item.Title;
                TestLst[i].Description = item.Description;

                // TODO: apply changes here to db in real-world scenario as well
            }
        }
    }

    private ConfirmModal confirmModal = default!;
    private NotificationModal notificationModal = default!;
    private CooldownTimer cooldownTimer = default!;
    private string Message { get; set; } = "";

    private async Task IncrementAttempt()
    {
        cooldownTimer.IncrementSubmissionCount();
    }

    private async Task ConfirmButton()
    {
        var response = await confirmModal.ShowAsync();
        Message = response ? "confirmed" : "canceled";
    }

    private async Task ShowNotification(string Title, string Message, ModalType modalType)
    {
        await notificationModal.ShowAsync(Title, Message, modalType);
    }
}
