<div class="dropdown">
    <button class="btn btn-secondary dropdown-toggle" type="button" @onclick="ToggleDropdown">
        @Placeholder (@SelectedItems.Count())
    </button>
    <div class="dropdown-menu @(isDropdownOpen ? "show" : "")" style="max-height: 200px; overflow-y: auto;">
        @foreach (var item in Items)
        {
            <div class="dropdown-item d-flex align-items-center">
                <input type="checkbox" class="form-check-input me-2"
                       @onchange="(e) => OnCheckboxChanged(e, item)"
                       checked="@SelectedItems.Contains(item)" />
                <label class="form-check-label">@item</label>
            </div>
        }
    </div>
</div>

@code {
    private bool isDropdownOpen = false;

    [Parameter]
    public List<string> Items { get; set; } = new();

    [Parameter]
    public IEnumerable<string> SelectedItems { get; set; } = new List<string>();

    [Parameter]
    public EventCallback<IEnumerable<string>> SelectedItemsChanged { get; set; }

    [Parameter]
    public string Placeholder { get; set; } = "Select Items";

    private async Task OnCheckboxChanged(ChangeEventArgs e, string item)
    {
        var selectedList = SelectedItems.ToList();

        if ((bool)e.Value)
        {
            if (!selectedList.Contains(item))
                selectedList.Add(item);
        }
        else
        {
            if (selectedList.Contains(item))
                selectedList.Remove(item);
        }

        await SelectedItemsChanged.InvokeAsync(selectedList);
    }

    private void ToggleDropdown()
    {
        isDropdownOpen = !isDropdownOpen;
    }
}
