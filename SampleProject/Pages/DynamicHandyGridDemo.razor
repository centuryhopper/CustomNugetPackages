@page "/dynamichandygrid-demo"
@using Client.Models
@using Client.Services
@using HandyBlazorComponents.Abstracts


<div class="m-5">
    <div>Dynamic HandyGrid demo:</div>

    @if (doneLoadingLst)
    {
        <CascadingValue Name="HandyGridState" Value="handyGridState" IsFixed="true">
            <DynamicHandyGrid @ref="dynamicHandyGrid" TItem="TestClass" TMapper="TestClassMapper" HandyGridEntity="HandyGridEntity"
                OnCreate="OnCreate" OnUpdate="OnUpdate" OnDelete="OnDelete" />
        </CascadingValue>
    }
    else
    {
        <span class="spinner-border spinner-border-sm mr-1"></span>
    }
</div>


<NotificationModal @ref="notificationModal" />
<ConfirmModal @ref="confirmModal" Title="Warning"
    BodyText="Are you sure you want to delete this record? THIS ACTION IS IRREVERSIBLE!" />
<HandyToast @ref="handyToast" Title="Success" Message="Your operation completed successfully."
    ToastType="HandyToastType.SUCCESS" Duration="5" />

@code {

    private string[] states =
    {
        "Alabama", "Alaska", "American Samoa", "Arizona",
        "Arkansas", "California", "Colorado", "Connecticut",
        "Delaware", "District of Columbia", "Federated States of Micronesia",
        "Florida", "Georgia", "Guam", "Hawaii", "Idaho",
        "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky",
        "Louisiana", "Maine", "Marshall Islands", "Maryland",
        "Massachusetts", "Michigan", "Minnesota", "Mississippi",
        "Missouri", "Montana", "Nebraska", "Nevada",
        "New Hampshire", "New Jersey", "New Mexico", "New York",
        "North Carolina", "North Dakota", "Northern Mariana Islands", "Ohio",
        "Oklahoma", "Oregon", "Palau", "Pennsylvania", "Puerto Rico",
        "Rhode Island", "South Carolina", "South Dakota", "Tennessee",
        "Texas", "Utah", "Vermont", "Virgin Island", "Virginia",
        "Washington", "West Virginia", "Wisconsin", "Wyoming",
    };

    private List<TestClass> TestLst = [
        new TestClass { Id=1, Title = "Title01", Description = "Description01", Descriptions = ["Texas","Utah","Vermont"],},
        new TestClass { Id=2, Title = "Title02", Description = "Description02", Descriptions = [],},

        new TestClass { Id=3, Title = "Title03", Description = "Description03", Descriptions = [],},
        new TestClass { Id=4, Title = "Title04", Description = "Description04", Descriptions = [],},

        new TestClass { Id=5, Title = "Title05", Description = "Description05", Descriptions = [],},
        new TestClass { Id=6, Title = "Title06", Description = "Description06", Descriptions = [],},

        new TestClass { Id=7, Title = "Title07", Description = "Description07", Descriptions = [],},
        new TestClass { Id=8, Title = "Title08", Description = "Description08", Descriptions = [],},
        // new TestClass { Id=9, Title = "Title09", Description = "Description09",},
        // new TestClass { Id=10, Title = "Title10", Description = "Description10",},
    ];

    private bool doneLoadingLst = false;
    private DynamicHandyGrid<TestClass, HandyGridEntity, TestClassMapper> dynamicHandyGrid = default!;
    private ConfirmModal confirmModal = default!;

    private GridStateService handyGridState;

    protected override void OnInitialized()
    {
        handyGridState = new(
            Items: TestLst
            .Select(item => new HandyGridEntity(Object: item))
            .OrderBy(item => item.Object.Id)
            .ToList(),
            ReadonlyColumns: [nameof(TestClass.Id)],
            ExampleFileUploadUrl: "templates/example.csv",
            OnSubmitFile: async (results) => {
                 Console.WriteLine("on submit file!");
                // triggers a re-render in memory
                
            },
            EditModeFragments: [
                new NamedRenderFragment<HandyGridEntity>(Name: "Descriptions", Fragment: o => @<MultiSelectCheckBoxList TItem="TestClass" Items="states.ToList()" SelectedItems="o.Object.Descriptions"
                    Placeholder="Select States" />)
            ],
            ViewModeFragments: null
        );
        
        doneLoadingLst = true;
    }

    private async Task OnCreate(IEnumerable<HandyGridEntity> items)
    {
        Console.WriteLine("added items");
        // TODO: apply changes here to db in real-world scenario as well

    }

    private async Task OnDelete(HandyGridEntity item)
    {
        Console.WriteLine("deleting item");
        // TODO: apply changes here to db in real-world scenario as well
    }

    private async Task OnUpdate(HandyGridEntity item)
    {
        Console.WriteLine("updating items");
        // TODO: apply changes here to db in real-world scenario as well
        //for (int i = 0; i < handyGridState.Items.Count; i++)
        //{
        //    if (handyGridState.Items[i].Object.Id == item.Object.Id)
        //    {
        //        handyGridState.Items[i].Object.Title = item.Object.Title;
        //        handyGridState.Items[i].Object.Description = item.Object.Description;
        //        handyGridState.Items[i].Object.Descriptions = item.Object.Descriptions;
        //    }
        //}

    }

    private HandyToast handyToast = default!;
    private NotificationModal notificationModal { get; set; }
}
