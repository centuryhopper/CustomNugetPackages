@page "/dynamichandygrid-demo"
@using Client.Models
@using Client.Services
@using HandyBlazorComponents.Abstracts
@* @using SampleProject.TestComponents *@
 
 
<div class="m-5">
    <div>Dynamic HandyGrid demo:</div>
    @if (doneLoadingLst)
    {
        <CascadingValue Name="HandyGridState" Value="handyGridState" IsFixed="true">
            <DynamicHandyGrid TItem="TestClass" TEntity="HandyGridEntity" Items="Items" />
        </CascadingValue>
    }
    else
    {
        <span class="spinner-border spinner-border-sm mr-1"></span>
    }
</div>
 
 
<NotificationModal @ref="notificationModal" />
<ConfirmModal @ref="confirmModal" Title="Warning"
    BodyText="Are you sure you want to delete this record? THIS ACTION IS IRREVERSIBLE!" />
<HandyToast @ref="handyToast" Title="Success" Message="Your operation completed successfully."
    ToastType="HandyToastType.SUCCESS" Duration="5" />
 
@code {
 
    private HandyToast handyToast = default!;
    private NotificationModal notificationModal { get; set; }
 
    private string[] states =
    {
        "Alabama", "Alaska", "American Samoa", "Arizona",
        "Arkansas", "California", "Colorado", "Connecticut",
        "Delaware", "District of Columbia", "Federated States of Micronesia",
        "Florida", "Georgia", "Guam", "Hawaii", "Idaho",
        "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky",
        "Louisiana", "Maine", "Marshall Islands", "Maryland",
        "Massachusetts", "Michigan", "Minnesota", "Mississippi",
        "Missouri", "Montana", "Nebraska", "Nevada",
        "New Hampshire", "New Jersey", "New Mexico", "New York",
        "North Carolina", "North Dakota", "Northern Mariana Islands", "Ohio",
        "Oklahoma", "Oregon", "Palau", "Pennsylvania", "Puerto Rico",
        "Rhode Island", "South Carolina", "South Dakota", "Tennessee",
        "Texas", "Utah", "Vermont", "Virgin Island", "Virginia",
        "Washington", "West Virginia", "Wisconsin", "Wyoming",
    };
 
    private List<TestClass> TestLst = [
        new TestClass { Id=1, Title = "Title01", Description = "Description01", Descriptions = ["Texas","Utah","Vermont"],},
        new TestClass { Id=2, Title = "Title02", Description = "Description02", Descriptions = [],},
 
        new TestClass { Id=3, Title = "Title03", Description = "Description03", Descriptions = [],},
        new TestClass { Id=4, Title = "Title04", Description = "Description04", Descriptions = [],},
 
        new TestClass { Id=5, Title = "Title05", Description = "Description05", Descriptions = [],},
        new TestClass { Id=6, Title = "Title06", Description = "Description06", Descriptions = [],},
 
        new TestClass { Id=7, Title = "Title07", Description = "Description07", Descriptions = [],},
        new TestClass { Id=8, Title = "Title08", Description = "Description08", Descriptions = [],},
        new TestClass { Id=9, Title = "Title09", Description = "Description09",},
        new TestClass { Id=10, Title = "Title10", Description = "Description10",},
        new TestClass { Id=11, Title = "Title11", Description = "Description11",},
        new TestClass { Id=12, Title = "Title12", Description = "Description12",},
        new TestClass { Id=13, Title = "Title13", Description = "Description13",},
        new TestClass { Id=14, Title = "Title14", Description = "Description14",},
        new TestClass { Id=15, Title = "Title15", Description = "Description15",},
        new TestClass { Id=16, Title = "Title16", Description = "Description16",},
        new TestClass { Id=17, Title = "Title17", Description = "Description17",},
        new TestClass { Id=18, Title = "Title18", Description = "Description18",},
        new TestClass { Id=19, Title = "Title19", Description = "Description19",},
        new TestClass { Id=20, Title = "Title20", Description = "Description20",},
    ];
 
    private bool doneLoadingLst = false;
    private ConfirmModal confirmModal = default!;
 
    private GridStateService handyGridState;
    private List<HandyGridEntity> Items = [];
 
    protected override void OnInitialized()
    {
        var items = TestLst
            .Select(item => new HandyGridEntity(Object: item))
            .OrderBy(item => item.Object.Id)
            .ToList();
        Items = items;
 
        handyGridState = new(
            Items: Items,
            PageSize: 3,
            CanAddNewItems: true,
            AddNewItemsText: "Add more stuff",
            Exportable: true,
            ExampleFileUploadUrl: "templates/example.csv",
            IsReadonly: false,
            ShowRowIndex: true,
            ShowFilters: true,
            ColumnsToHide: [],
            ReadonlyColumns: [nameof(TestClass.Id)],
            OnCreate: async (items) => {
                Console.WriteLine("added items");
                // included for showing a real-time change
                Items.AddRange(items);
                StateHasChanged();
                // NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
                // TODO: apply changes here to db in real-world scenario as well
            },
            OnUpdate: async (item) => {
                //Console.WriteLine("updating items");
                //Console.WriteLine(item.Object);
                // TODO: apply changes here to db in real-world scenario as well
 
                // included for showing a real-time change
                for (int i = 0; i < handyGridState.Items.Count; i++)
                {
                    if (Items[i].Object.Id == item.Object.Id)
                    {
                        Items[i].Object.Title = item.Object.Title;
                        Items[i].Object.Description = item.Object.Description;
                        Items[i].Object.Descriptions = item.Object.Descriptions;
                        Items[i].Object.CheckBoxTest = item.Object.CheckBoxTest;
                        Items[i].Object.DateTest = item.Object.DateTest;
                        Items[i].Object.DropdownTest = item.Object.DropdownTest;
                        Items[i].Object.TextAreaTest = item.Object.TextAreaTest;
                        Items[i].Object.ImageUpload = item.Object.ImageUpload;
                        Items[i].Object.PdfUpload = item.Object.PdfUpload;
                    }
                }
 
                StateHasChanged();
            },
            OnDelete: async (item) => {
                //Console.WriteLine("deleting item");
 
                await Task.Delay(1);
 
                // included for showing a real-time change
                var toDelete = Items.Find(el => el.Object.Id == item.Object.Id);
                if (toDelete is not null)
                {
                    Console.WriteLine(item.Object.Id);
                    Items.Remove(item);
                    //Items = Items.Where(el => el.Object.Id != item.Object.Id).ToList();
                    StateHasChanged();
                }
                // TODO: apply changes here to db in real-world scenario as well
            },         
            OnSubmitFile: async (results) => {
                 Console.WriteLine("on submit file!");
                // triggers a re-render in memory
                Items.AddRange(results);
                StateHasChanged();
            },
            EditModeFragments: [
                new NamedRenderFragment<HandyGridEntity>(
                    Name: nameof(TestClass.Descriptions),
                    Fragment: o => @<HandyMultiSelectCheckboxList TItem="TestClass" Items="states.ToList()" SelectedItems="o.Object.Descriptions" Placeholder="Select States" />),
                new NamedRenderFragment<HandyGridEntity>(
                    Name: nameof(TestClass.CheckBoxTest),
                    Fragment: o => @<HandyCheckbox TItem="TestClass" Item="o.Object" ColumnName="@(nameof(TestClass.CheckBoxTest))" />),
 
                new NamedRenderFragment<HandyGridEntity>(
                    Name: nameof(TestClass.DateTest),
                    Fragment: o => @<HandyDatePicker TItem="TestClass" Item="o.Object" ColumnName="@(nameof(TestClass.DateTest))"/>),
 
                new NamedRenderFragment<HandyGridEntity>(
                    Name: nameof(TestClass.DropdownTest),
                    Fragment: o => @<HandyDropdown TItem="TestClass" Item="o.Object" ColumnName="@(nameof(TestClass.DropdownTest))" Style="width: 12rem;" Options="@(["", "a", "b", "c"])"/>),
 
                new NamedRenderFragment<HandyGridEntity>(
                    Name: nameof(TestClass.TextAreaTest),
                    Fragment: o => @<HandyTextAreaInput TItem="TestClass" Item="o.Object" ColumnName="@(nameof(TestClass.TextAreaTest))" Style="width: 12rem;"/>),
 
                new NamedRenderFragment<HandyGridEntity>(
                    Name: nameof(TestClass.ImageUpload),
                    // create an input file
                    Fragment: o => @<HandyFileUpload 
                        TItem="TestClass"
                        ColumnName="@(nameof(TestClass.ImageUpload))"
                        Item="o.Object"
                        Style="width: 12rem;"
                        Accept=".jpg,.png,.JPG,.PNG"
                    />
                ),
 
                new NamedRenderFragment<HandyGridEntity>(
                    Name: nameof(TestClass.PdfUpload),
                    // create an input file
                    Fragment: o => @<HandyFileUpload 
                        TItem="TestClass"
                        ColumnName="@(nameof(TestClass.PdfUpload))"
                        Item="o.Object"
                        Style="width: 12rem;"
                        Accept="application/pdf"
                    />
                ),
            ],
            ViewModeFragments: [
                new NamedRenderFragment<HandyGridEntity>(
                    Name: nameof(TestClass.ImageUpload),
                    Fragment: o => o.Object.ImageUpload is null ? @<div></div> : @<img style="max-width: 100px;" src="@($"data:image/png;base64,{Convert.ToBase64String(o.Object.ImageUpload)}")">
                ),
                new NamedRenderFragment<HandyGridEntity>(
                    Name: nameof(TestClass.PdfUpload),
                    Fragment: o => o.Object.PdfUpload is null ? @<span>No pdf was added for this record</span> : @<a 
                    style="color: blue; text-decoration: underline; cursor:pointer;"
                    @onclick="@(() => DownloadPDF(o.Object))" 
                    >View PDF</a>
                )
            ]
 
        );
 
        doneLoadingLst = true;
    }
 
    private async Task DownloadPDF(TestClass dto)
    {
        var base64 = Convert.ToBase64String(dto.PdfUpload);
        await jsRuntime.InvokeVoidAsync("downloadFile", base64, "application/pdf", "sample_pdf");
    }
 
 
}