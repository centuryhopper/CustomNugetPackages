<div class="searchable-dropdown" style="width: 10rem;"
     @onfocusin="() => IsDropdownVisible = true"
     @onfocusout="HandleFocusOut">

    <input type="text"
           class="form-control"
           @bind="SearchTerm"
           @bind:event="oninput"
           placeholder="@Placeholder"
           @onkeydown="HandleInputKeyDown" />

    @if (IsDropdownVisible)
    {
        <ul class="dropdown-menu show"
            tabindex="-1"
            style="width: 100%; max-height: 200px; overflow-y: auto;"
            @onclick:stopPropagation>
            @if (FilteredItems?.Any() == true)
            {
                @for (int i = 0; i < FilteredItems.Count; i++)
                {
                    var item = FilteredItems[i];
                    var cur = i;
                    var refValue = cur == 0 ? FirstItemRef : null;
                    <li tabindex="0"
                        @onclick="() => SelectItem(item)"
                        @onkeydown="(e) => HandleItemKeyDown(e, item, cur)"
                        class="dropdown-item p-3"
                        @ref="@refValue">
                        @item
                    </li>
                }
            }
            else
            {
                <li class="dropdown-item text-muted">No results</li>
            }
        </ul>
    }
</div>

@code {
    [Parameter] public List<string> Items { get; set; } = new();
    [Parameter] public EventCallback<string> OnItemSelected { get; set; }
    [Parameter] public string Placeholder { get; set; } = "Search...";

    private string SearchTerm { get; set; } = "";
    private bool IsDropdownVisible { get; set; } = false;

    private List<string> FilteredItems => string.IsNullOrWhiteSpace(SearchTerm)
        ? Items
        : Items.Where(i => i.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase)).ToList();

    private ElementReference? FirstItemRef;

    private void SelectItem(string item)
    {
        SearchTerm = item;
        IsDropdownVisible = false;
        OnItemSelected.InvokeAsync(item);
    }

    private async Task HandleInputKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "ArrowDown" && FilteredItems.Any())
        {
            await Task.Yield(); // Ensure the DOM is updated
            if (FirstItemRef.HasValue)
            {
                await FirstItemRef.Value.FocusAsync();
            }
        }
        else if (e.Key == "Escape")
        {
            IsDropdownVisible = false;
        }
    }

    private void HandleItemKeyDown(KeyboardEventArgs e, string item, int index)
    {
        if (e.Key == "Enter")
        {
            SelectItem(item);
        }
    }

    private async Task HandleFocusOut(FocusEventArgs e)
    {
        await Task.Delay(100); // Allow tab movement before checking focus
        var active = await JS.InvokeAsync<string>("getActiveElementClass");
        if (!active.Contains("dropdown-item") && !active.Contains("form-control"))
        {
            IsDropdownVisible = false;
            StateHasChanged();
        }
    }

    [Inject] private IJSRuntime JS { get; set; } = default!;
}

<style>
    .searchable-dropdown {
        position: relative;
        width: 100%;
    }

    .searchable-dropdown .dropdown-menu {
        display: block;
        position: absolute;
        z-index: 1000;
    }

    .dropdown-item {
        cursor: pointer;
    }
</style>
