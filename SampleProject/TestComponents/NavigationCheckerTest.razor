@using Microsoft.AspNetCore.Components.Routing
@inject NavigationManager NavigationManager
@implements IDisposable
 
@* ConfirmExternalNavigation="IsPageDirty" must set like this so that reloading page doesn't show navigation popup unless page is dirty *@
<NavigationLock ConfirmExternalNavigation="IsPageDirty" 
OnBeforeInternalNavigation="@(async (LocationChangingContext context) => {
  
    // If navigation is triggered due to idle timeout, allow it
    if (IsIdleRedirect)
    {
        return; // Allow navigation
    }
 
    if (IsPageDirty)
    {
        var isConfirmed = await jsRuntime.InvokeAsync<bool>("confirm", 
            "Are you sure you want to leave? You have made changes to this page that are not saved");
 
        if (!isConfirmed)
        {
            context.PreventNavigation();
        }
    }
})" />

@* 
nav checker
    - session timer modal
    - session expired modal

 *@

<SessionTimerModal @ref="SessionTimerModal" Title="Session Timeout Warning" />

<SessionExpiredModal @ref="SessionExpiredModal" Title="Notice" BodyText="Sorry. Your session has Expired." Callback="@(() => {
    // Console.WriteLine("SessionExpiredModal callback invoked!");
    NavigationManager.NavigateTo(string.IsNullOrWhiteSpace(FallBackURL) ? NavigationManager.BaseUri : FallBackURL, forceLoad: true);
})"/>
 
 
@code {
    private IJSObjectReference module;
    private SessionTimerModal SessionTimerModal = default!;
    private SessionExpiredModal SessionExpiredModal = default!;
    private bool IsIdleRedirect = false;
    [Parameter]
    public bool IsPageDirty {get;set;} = false;
    [Parameter]
    public int Seconds { get;set; } = 5;
    [Parameter]
    public string JWT_TOKEN_NAME {get;set;} = "jwt";
    [Parameter]
    public string JWT_TOKEN_EXP_DATE {get;set;} = "expDate";
    [Parameter]
    public string FallBackURL {get;set;} = string.Empty;

    public async void Dispose()
    {
        await module.DisposeAsync();
    }
 
    [JSInvokable]
    public async void RedirectUser()
    {
        IsIdleRedirect = true; // Set flag to bypass NavigationLock
        // small delay before navigating so that IsIdleRedirect is true when OnBeforeInternalNavigation is called
        await Task.Delay(1);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./TestComponents/NavigationCheckerTest.razor.js");

            await jsRuntime.InvokeVoidAsync("localStorage.setItem", JWT_TOKEN_EXP_DATE, new DateTimeOffset(DateTime.Now.AddSeconds(55)).ToUnixTimeMilliseconds());
            await module.InvokeVoidAsync("checkExpiry", DotNetObjectReference.Create(this), string.IsNullOrWhiteSpace(FallBackURL) ? NavigationManager.BaseUri : FallBackURL, 0, 1, JWT_TOKEN_NAME, JWT_TOKEN_EXP_DATE);
 
            // 30 minutes to milliseconds
            await module.InvokeVoidAsync("checkExpiry", DotNetObjectReference.Create(this), string.IsNullOrWhiteSpace(FallBackURL) ? NavigationManager.BaseUri : FallBackURL, Seconds * 1000, 2, JWT_TOKEN_NAME, JWT_TOKEN_EXP_DATE);
        }
    }
}
 
 
 
 
