@using SampleProject.ComponentBases
@inject IJSRuntime jsRuntime
@inject NavigationManager NavigationManager

@inherits ModalBase


<div id="session_timer_modal" class="modal fade @(IsVisible ? "show d-block" : "")" tabindex="-1" style="display: block; background: rgba(0, 0, 0, 0.5);">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Title</h5>
                <button type="button" class="btn-close" @onclick="Cancel"></button>
            </div>
            <div class="modal-body">
                <p id="session_timer_modal_body" class="@ModalClass">@BodyText</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Stay Logged In</button>
                <button type="button" class="btn btn-primary" @onclick="Confirm">Log Out</button>
            </div>
        </div>
    </div>
</div>

<SessionExpiredModal @ref="sessionExpiredModal" Title="Notice" BodyText="Sorry. Your session has Expired." Callback="@(() => {
    //Console.WriteLine("SessionExpiredModal callback invoked!");
    NavigationManager.NavigateTo(string.IsNullOrWhiteSpace(FallBackURL) ? NavigationManager.BaseUri : FallBackURL, forceLoad: true);
})"/>


@code {

    private SessionExpiredModal sessionExpiredModal = default!;

    [Parameter]
    public int Seconds { get; set; } = 5;
    [Parameter]
    public string JWT_TOKEN_NAME {get;set;} = string.Empty;
    [Parameter]
    public string FallBackURL {get;set;} = string.Empty;

    protected override void Cancel()
    {
        Console.WriteLine("staying logged in");
        base.Cancel();
    }
    protected override async void Confirm()
    {
        Console.WriteLine("confirming!");
        // remove the jwt
        if (!string.IsNullOrWhiteSpace(JWT_TOKEN_NAME))
        {
            var value = await jsRuntime.InvokeAsync<string?>("localStorage.getItem", JWT_TOKEN_NAME);
            if (!string.IsNullOrWhiteSpace(value))
            {
                await jsRuntime.InvokeVoidAsync("localStorage.removeItem", JWT_TOKEN_NAME);
            }
        }

        // await Task.Delay(5000);
        // show session expired popup
        await sessionExpiredModal.ShowAsync();
        base.Confirm();
    }

    [JSInvokable]
    public override Task<bool> ShowAsync()
    {
        return base.ShowAsync();
    }
}
