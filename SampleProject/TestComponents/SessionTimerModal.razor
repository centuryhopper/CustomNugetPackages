@using SampleProject.ComponentBases
@using System.Timers
@inject IJSRuntime jsRuntime
@inject NavigationManager NavigationManager

@inherits ModalBase


<div id="session_timer_modal" class="modal fade @(IsVisible ? "show d-block" : "")" tabindex="-1" style="display: block; background: rgba(0, 0, 0, 0.5);">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Title</h5>
                <button type="button" class="btn-close" @onclick="Cancel"></button>
            </div>
            <div class="modal-body">
                <p id="session_timer_modal_body" class="@ModalClass">@BodyText</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Stay Logged In</button>
                <button type="button" class="btn btn-primary" @onclick="Confirm">Log Out</button>
            </div>
        </div>
    </div>
</div>


@code {

    private Timer SessionTimer;

    protected override void OnInitialized()
    {
        SessionTimer = new Timer(1000);
        SessionTimer.Elapsed += OnSessionTimerElapsed!;
    }

    private void OnSessionTimerElapsed(object sender, ElapsedEventArgs e)
    {
        
    }

    [JSInvokable]
    public override void Cancel()
    {
        Console.WriteLine("staying logged in");
        base.Cancel();
    }

    [JSInvokable]
    public void HitConfirm()
    {
        Console.WriteLine("confirming!");
        base.Confirm();
    }

    [JSInvokable]
    public bool IsModalVisible() => IsVisible;

    [JSInvokable]
    public override Task<bool> ShowAsync()
    {
        return base.ShowAsync();
    }

    [JSInvokable]
    public Task<bool> ShowAsyncWithParams(string title, string bodyText, HandyModalType HandyModalType=HandyModalType.WARNING)
    {
        return base.ShowAsync(title, bodyText, HandyModalType);
    }
}
